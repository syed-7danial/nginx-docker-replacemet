name: Build and Deploy Nginx

# Trigger the workflow manually with inputs
on:
  workflow_dispatch:
    inputs:
      ecs_cluster:
        description: 'ECS Cluster Name'
        required: true
        type: string
      ecr_repo:
        description: 'ECR Repository Name'
        required: true
        type: string
      placeholder_values:
        description: 'Placeholder Values'
        required: true
        type: string
      aws_region:
        description: 'AWS Region'
        required: true
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: arn:aws:iam::489994096722:role/akbar-oidc-github-action
        aws-region: ${{ github.event.inputs.aws_region }}
        mask-aws-account-id: 'no'

    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ github.event.inputs.aws_region }} | docker login --username AWS --password-stdin 489994096722.dkr.ecr.${{ github.event.inputs.aws_region }}.amazonaws.com

    - name: Replace placeholders in nginx.conf
      run: |
        PLACEHOLDER_VALUES="${{ github.event.inputs.placeholder_values }}"
        IFS=$'\n'       # Set the Internal Field Separator to newline
        for placeholder in $PLACEHOLDER_VALUES; do
          key=$(echo "$placeholder" | cut -d'=' -f1)
          value=$(echo "$placeholder" | cut -d'=' -f2-)
          sed -i "s|{{${key}}}|${value}|g" nginx/nginx.conf
        done

    - name: Build Docker image
      run: |
        docker build -t ${{ github.event.inputs.ecr_repo }}:latest .

    - name: Tag Docker image
      run: |
        docker tag ${{ github.event.inputs.ecr_repo }}:latest 489994096722.dkr.ecr.${{ github.event.inputs.aws_region }}.amazonaws.com/${{ github.event.inputs.ecr_repo }}:latest

    - name: Push Docker image to ECR
      run: |
        docker push 489994096722.dkr.ecr.${{ github.event.inputs.aws_region }}.amazonaws.com/${{ github.event.inputs.ecr_repo }}:latest

    - name: Update ECS service
      run: |
        ecs_service=$(aws ecs list-services --cluster ${{ github.event.inputs.ecs_cluster }} --region ${{ github.event.inputs.aws_region }} --query 'serviceArns[0]' --output text)
        ecs_task_definition=$(aws ecs describe-services --cluster ${{ github.event.inputs.ecs_cluster }} --services $ecs_service --region ${{ github.event.inputs.aws_region }} --query 'services[0].taskDefinition' --output text)
        new_task_definition=$(echo $ecs_task_definition | sed "s/:.*$//g")

        aws ecs update-service --cluster ${{ github.event.inputs.ecs_cluster }} --service $ecs_service --region ${{ github.event.inputs.aws_region }} --force-new-deployment
